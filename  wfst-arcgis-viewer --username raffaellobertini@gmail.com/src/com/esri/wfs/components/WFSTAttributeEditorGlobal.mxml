<?xml version="1.0" encoding="utf-8"?>
<!--
/************************ 			Updated 	*******************************************\
*** Raffaello Bertini																	***
***
/*****************************************************************************************
*Copyright 2012 Marco Vassura - CIRI ICT                                                 *
*This work is licensed under the                                                         *
*Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.             *
*Based on a work from ESRI dev summer 2009 available at arcscripts.esri.com              *
*Permissions beyond the scope of this license may be available at marco.vassura@unibo.it *
*To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ *
*or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View,      *
*California, 94041, USA.                                                                 *

This work is still subject to the original copyright:

Copyright 2008 ESRI

All rights reserved under the copyright laws of the United States
and applicable international laws, treaties, and conventions.

You may freely redistribute and use this sample code, with or
without modification, provided you include the original copyright
notice and use restrictions.
See use restrictions at http://resources.esri.com/help/9.3/usagerestrictions.htm.
-->
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:esri="http://www.esri.com/2008/ags"
		creationComplete="init()" direction="vertical">
<mx:Script>
	<![CDATA[
		import com.esri.ags.Map;
		import com.esri.ags.events.DrawEvent;
		import com.esri.ags.events.MapEvent;
		import com.esri.ags.geometry.Geometry;
		import com.esri.ags.layers.GraphicsLayer;
		import com.esri.ags.layers.Layer;
		import com.esri.wfs.events.WFSEvent;
		import com.esri.wfs.events.WFSTEvent;
		//import com.esri.wfs.layers.WFSLayer;
		import com.esri.wfs.layers.WFSTLayer;
		import com.esri.wfs.utils.WFSUtil;
		
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.controls.Alert;
		import mx.controls.TextInput;
		import mx.events.DataGridEvent;
		import mx.events.DataGridEventReason;
		import mx.events.ListEvent;
		
		private var m_mapChanged :Boolean = false;
		private var m_wfsLayerChanged :Boolean = false;
		
		private var m_map :Map = null;
		private var m_wfsLayer :WFSTLayer = null;
		private var m_wfsLayerIDs :ArrayCollection = new ArrayCollection();
		
		[Bindable]
		private var m_canSelectLayer :Boolean = true;
		
		
		private var m_includeLayers :String;
		
		private var m_currentAttribute :String;
		private var m_currentValue :String;
		
		
		/**
		 per ora read only
		 * 		 * Registers the control with the current WFST layer.
		 
		 private function registerListeners() :void
		 {
		 if( wfsLayer )
		 {
		 m_wfsLayer.addEventListener( WFSTEvent.EDIT_BEGUN, editBegun );
		 m_wfsLayer.addEventListener( WFSTEvent.EDIT_SAVED, editSaved );
		 m_wfsLayer.addEventListener( WFSTEvent.EDIT_CANCELED, editCanceled );
		 m_wfsLayer.addEventListener( WFSTEvent.FEATURE_SELECTED, featureSelected );
		 m_wfsLayer.addEventListener( WFSTEvent.FEATURE_DESELECTED, featureDeselected );
		 }
		 }
		 
		 
		 * @private
		 * Unregisters the control with the current WFST layer.
		 
		 private function unregisterListeners() :void
		 {
		 if( wfsLayer )
		 {
		 m_wfsLayer.removeEventListener( WFSTEvent.EDIT_BEGUN, editBegun );
		 m_wfsLayer.removeEventListener( WFSTEvent.EDIT_SAVED, editSaved );
		 m_wfsLayer.removeEventListener( WFSTEvent.EDIT_CANCELED, editCanceled );
		 m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_SELECTED, featureSelected );
		 m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_DESELECTED, featureDeselected );
		 }
		 }
		 */
		
		[Bindable]
		/** The Map this control is currently bound to. */
		public function get map() :Map
		{
			return m_map;
		}
		
		/** @private */
		public function set map( value :Map ) :void
		{
			if( m_map != value )
			{
				unregisterMapListeners();
				m_map = value;
				m_mapChanged = true;
				registerMapListeners();
				invalidateProperties();
			}
		}
		
		/*
		public function set includedLayers( includeLayers :String  ) :void
		{
			m_includeLayers=includeLayers;
		}
		*/
		
		
		[Bindable]
		/** The WFSTransactionalLayer this control is currently bound to. */
		public function get wfsLayer() :WFSTLayer
		{
			return m_wfsLayer;
		}
		
		/** sets layer as current layer */
		public function set wfsLayer( layer :WFSTLayer ) :void
		{
			if( m_wfsLayer != layer )
			{
				unregisterLayerListeners();
				if( m_wfsLayer != null )
				{
					m_wfsLayer.clearSelection();
					m_wfsLayer.mouseChildren = false;
				}
				m_wfsLayer = layer;
				if( m_wfsLayer != null )
				{
					m_wfsLayer.mouseChildren = true;
				}
				m_wfsLayerChanged = true;
				determineLayerState();
				registerLayerListeners();					
				invalidateProperties();
				
				//aggiunto per selezionare il layer nel combobox
				 
				var i:int = 0;
				while(i<wfsLayers.length && wfsLayers.getItemAt(i).Layer != layer)
					i++;
				
				
				if(i<wfsLayers.length)
				{
					wfsLayerComboBox.selectedIndex = i;
					myDataGrid.dataProvider = m_wfsLayer.featureSetAttributes;
				}
				else trace("error");
			
			}
		}
		
		[Bindable]
		/** If true, shows the WFS layer combo box, false hides it. */
		public var showWFSLayerChoices :Boolean = false;
		
		/** Initialize the application specifics that need to happen on creation complete. */
		private function init() :void
		{
			var sort :Sort = new Sort();
			sort.fields = [new SortField( "Name" )];
			wfsLayers.sort = sort;
			wfsLayers.refresh();
		}
		
		/**
		 * @private
		 * Finds the WFSTransactionalLayers available through the bound map.
		 */
		private function findWFSLayers() :void
		{
			if( map )
			{ 
				for each( var layerID :String in map.layerIds )
				{
					var layer :Layer = map.getLayer( layerID );
					if( layer is WFSTLayer )
					{
						var label :String = WFSTLayer( layer ).label;
						if( label == null || label == "" )
						{
							label = layer.name;
						}
						
						// if the layer hasn't already been added, add it now
						if( !WFSUtil.containsString( label, m_wfsLayerIDs ) )
						{
							layer.mouseChildren = false; 
							wfsLayers.addItem( { Name: label, Layer: layer } );
							m_wfsLayerIDs.addItem( label );
						}
					}
				}
			}
			else if( wfsLayer )
			{
				for each( layerID in wfsLayer.map.layerIds )
				{
					layer = map.getLayer( layerID );
					if( layer is WFSTLayer )
					{
						label = WFSTLayer( layer ).label;
						if( label == null || label == "" )
						{
							label = layer.name;
						}
						
						// if the layer hasn't already been added, add it now
						if( !WFSUtil.containsString( label, m_wfsLayerIDs ) )
						{
							layer.mouseChildren = false;
							wfsLayers.addItem( { Name: label, Layer: layer } );
							m_wfsLayerIDs.addItem( label );
						}
					}
				}
			}
		}
		
		/** @private */
		override protected function commitProperties() :void
		{
			super.commitProperties();
			// map or layer changed
			if( m_mapChanged || m_wfsLayerChanged )
			{
				// if the map changed, find the WFS layers
				if( m_mapChanged )
				{
					// a new layer wasn't chosen, choose a new one
					if( !m_wfsLayerChanged )
					{
						allLayersRemoved();
					}
					findWFSLayers();
				}
				
				m_mapChanged = false;
				m_wfsLayerChanged = false;
			}
		}
		
		/**
		 * @private
		 * Handles switching the WFS layer.
		 */
		private function onLayerChange() :void
		{
			var selectedLayer :Object = wfsLayerComboBox.selectedItem;
			if( selectedLayer )
			{
				wfsLayer = selectedLayer.Layer as WFSTLayer;
				myDataGrid.dataProvider = wfsLayer.featureSetAttributes;
				wfsLayerVisible.selected = wfsLayer.visible;
			}
		}
		
		/**
		 * @private
		 * Registers the control with the current map.
		 */
		private function registerMapListeners() :void
		{
			if( map )
			{
				m_map.addEventListener( MapEvent.LAYER_ADD, layerAdded );
				m_map.addEventListener( MapEvent.LAYER_REMOVE, layerRemoved );
				m_map.addEventListener( MapEvent.LAYER_REMOVE_ALL, allLayersRemoved );
			}
		}
		
		/**
		 * @private
		 * Unregisters the control with the current map.
		 */
		private function unregisterMapListeners() :void
		{
			if( map )
			{
				m_map.removeEventListener( MapEvent.LAYER_ADD, layerAdded );
				m_map.removeEventListener( MapEvent.LAYER_REMOVE, layerRemoved );
				m_map.removeEventListener( MapEvent.LAYER_REMOVE_ALL, allLayersRemoved );
			}
		}
		
		/**
		 * @private
		 * Registers the control with the current WFST layer.
		 */
		private function registerLayerListeners() :void
		{
			if( wfsLayer )
			{
				m_wfsLayer.addEventListener( WFSTEvent.EDIT_BEGUN, editBegun );
				m_wfsLayer.addEventListener( WFSTEvent.EDIT_SAVED, editSaved );
				m_wfsLayer.addEventListener( WFSTEvent.EDIT_CANCELED, editCanceled );
				m_wfsLayer.addEventListener( WFSTEvent.FEATURE_INSERTED, featureInserted );
				m_wfsLayer.addEventListener( WFSTEvent.FEATURE_DELETED, featureDeleted );
				m_wfsLayer.addEventListener( WFSTEvent.FEATURE_SELECTED, featureSelected );
				m_wfsLayer.addEventListener( WFSTEvent.FEATURE_DESELECTED, featureDeselected );
				m_wfsLayer.addEventListener( WFSTEvent.TRANSACTION_STARTED, transactionStarted );
				m_wfsLayer.addEventListener( WFSTEvent.TRANSACTION_COMMITTED, transactionEnded );
				m_wfsLayer.addEventListener( WFSTEvent.TRANSACTION_FAILED, transactionEnded );
				m_wfsLayer.addEventListener( WFSEvent.LOADING_COMPLETE, loadingComplete);
			}
		}
		
		/**
		 * @private
		 * Unregisters the control with the current WFST layer.
		 */
		private function unregisterLayerListeners() :void
		{
			if( wfsLayer )
			{
				m_wfsLayer.removeEventListener( WFSTEvent.EDIT_BEGUN, editBegun );
				m_wfsLayer.removeEventListener( WFSTEvent.EDIT_SAVED, editSaved );
				m_wfsLayer.removeEventListener( WFSTEvent.EDIT_CANCELED, editCanceled );
				m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_INSERTED, featureInserted );
				m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_DELETED, featureDeleted );
				m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_SELECTED, featureSelected );
				m_wfsLayer.removeEventListener( WFSTEvent.FEATURE_DESELECTED, featureDeselected );
				m_wfsLayer.removeEventListener( WFSTEvent.TRANSACTION_STARTED, transactionStarted );
				m_wfsLayer.removeEventListener( WFSTEvent.TRANSACTION_COMMITTED, transactionEnded );
				m_wfsLayer.removeEventListener( WFSTEvent.TRANSACTION_FAILED, transactionEnded );
				m_wfsLayer.removeEventListener( WFSEvent.LOADING_COMPLETE, loadingComplete);
			}
		}
		
		
		/******
		@private
		 * selects features when they're clicked on the table
		*/
		private function itemClickEvent(event:ListEvent):void {
			//String(event.columnIndex);
			//String(event.rowIndex);
			//event.type;
			wfsLayer.setselectedFeature(event.currentTarget.selectedItem.GML_FEATURE_ID);
		}

		
		
		/**
		 * @private
		 * Clears the selected feature.
		 */
		private function clearSelection() :void
		{
			if( wfsLayer )
			{
				wfsLayer.clearSelection();
			}
		}
		
		/**
		 * @private
		 * Begins editing the selected feature.
		 */
		private function beginEdit() :void
		{
			if( wfsLayer )
			{
				wfsLayer.beginEdit();
				m_canSelectLayer = false;
			}
		}
		
		/**
		 * @private
		 * Saves the current edits.
		 */
		private function saveEdit() :void
		{
			if( wfsLayer )
			{
				allButtonsOff();
				wfsLayer.saveEdit();
				m_canSelectLayer = true;
			}
		}
		
		/**
		 * @private
		 * Cancels the current edits.
		 */
		private function cancelEdit() :void
		{
			if( wfsLayer )
			{
				wfsLayer.cancelEdit();
				m_canSelectLayer = true;
			}
		}
		
		/**
		 * @private
		 * Deletes the selected feature.
		 */
		private function deleteFeature() :void
		{
			if( wfsLayer )
			{
				wfsLayer.deleteFeature();
				m_canSelectLayer = false;
			}
		}
		
		/**
		 * @private
		 * Handles a WFSTransactionalLayer being added to the Map.
		 */
		private function layerAdded( event :MapEvent ) :void
		{
			if( event.layer is WFSTLayer )
			{
				var notContained :Boolean = true;
				var transLayer :WFSTLayer = event.layer as WFSTLayer;
				var label :String = transLayer.label;
				if( label == null || label == "" )
				{
					label = transLayer.name;
				}
				if( !WFSUtil.containsString( label, m_wfsLayerIDs ) )
				{
					transLayer.mouseChildren = false;
					var layerEntry :Object = { Name: label, Layer: transLayer }; 
					wfsLayers.addItem( layerEntry );
					if( !wfsLayer )
					{
						wfsLayer = transLayer;
						wfsLayerComboBox.selectedIndex = wfsLayers.getItemIndex( layerEntry );
					}
				}
			}
		}
		
		/**
		 * @private
		 * Handles a WFSTransactionalLayer being removed from the Map.
		 */
		private function layerRemoved( event :MapEvent ) :void
		{
			if( event.layer is WFSTLayer )
			{
				var transLayer :WFSTLayer = event.layer as WFSTLayer;
				transLayer.mouseChildren = true;
				var label :String = transLayer.label;
				if( label == null || label == "" )
				{ 
					label = transLayer.name;
				}
				var index :int = WFSUtil.getStringIndex( label, m_wfsLayerIDs );
				if( index > -1 )
				{
					if( wfsLayerComboBox.selectedIndex == index )
					{
						wfsLayerComboBox.selectedIndex = -1;
					}
						// TODO - test this, ComboBox might manage this for us
					else if( wfsLayerComboBox.selectedIndex > index )
					{
						wfsLayerComboBox.selectedIndex -= 1; // decrease selected index by one
						//WFSUtils.getStringIndex( label, m_wfsLayerIDs );
					}
					wfsLayers.removeItemAt( index );
					m_wfsLayerIDs.removeItemAt( index );
				}
			}
		}
		
		/**
		 * @private
		 * Handles the removal of all layers from the Map.
		 */
		private function allLayersRemoved( event :MapEvent = null ) :void
		{
			// reenable mouse handling
			for each( var layer :WFSTLayer in wfsLayers )
			{
				layer.mouseChildren = true;
			}
			
			wfsLayer = null;
			wfsLayers.removeAll();
			m_wfsLayerIDs.removeAll();
		}
		
		
		
		/**
		 * @private
		 * Handles the selection of a feature in the WFST layer.
		 * @see WFSTEvent.FEATURE_SELECTED
		 */
		private function featureSelected( event :WFSTEvent ) :void
		{
			var gData:Object = myDataGrid.dataProvider;
			var i:Number=0;
			var thisObj:Object = gData.getItemAt(i);
			while(thisObj.GML_FEATURE_ID != wfsLayer.selectedFeature.attributes.GML_FEATURE_ID){
				i++;
				if(i < gData.length) 
					thisObj = gData.getItemAt(i);
				else {Alert.show("error, feature not found");return}
			}
			
			myDataGrid.selectedIndex = i;
			//sometimes scrollToIndex doesnt work if validateNow() not done
			myDataGrid.validateNow();
			myDataGrid.scrollToIndex(i);
		
			
		}
		
		//selects first feature when loading
		public function selectFirstFeature() :void
		{
			var gData:Object = myDataGrid.dataProvider;
			var i:Number=0;
			var thisObj:Object = gData.getItemAt(i);
			
			wfsLayer.setselectedFeature(thisObj.GML_FEATURE_ID);
				
			myDataGrid.selectedIndex = i;
			//sometimes scrollToIndex doesnt work if validateNow() not done
			myDataGrid.validateNow();
			myDataGrid.scrollToIndex(i);
			
			
		}
		
		
		
		/**
		 * @private
		 * Handles the deselection of a feature in the WFST layer.
		 * @see WFSTEvent.FEATURE_DESELECTED
		 */
		private function featureDeselected( event :WFSTEvent ) :void
		{
			
		}
		
		/**
		 * @private
		 * Handles the state of the control after an edit has begun.
		 * @see WFSTEvent.EDIT_BEGUN
		 */
		private function editBegun( event :WFSTEvent ) :void
		{
			
			
		}
		
		/**
		 * @private
		 * Handles the state of the control after an edit has been saved.
		 * @see WFSTEvent.EDIT_SAVED
		 */
		private function editSaved( event :WFSTEvent ) :void
		{
		}
		
		/**
		 * @private
		 * Handles the state of the control after an edit has been canceled.
		 * @see WFSTEvent.EDIT_CANCELED
		 */
		private function editCanceled( event :WFSTEvent ) :void
		{
			
			if( wfsLayer.selectedFeature )
			{
				
			}
			else
			{
				
			}
		}
		
		/**
		 * @private
		 * Handles the state of the control after a feature has been deleted.
		 * @see WFSTEvent.FEATURE_DELETED
		 */
		private function featureDeleted( event :WFSTEvent ) :void
		{
			
		}			
		
		/**
		 * @private
		 * Handles the state of the control once a feature has been inserted.
		 * @see WFSTEvent.FEATURE_INSERTED
		 */
		private function featureInserted( event :WFSTEvent ) :void
		{
			
		}
		
		
		/**
		 * @private
		 * Handles the state of the control once a transaction has been started.
		 * @see WFSTEvent.TRANSACTION_STARTED
		 */
		private function transactionStarted( event :WFSTEvent ) :void
		{
			
		}
		
		
		
		
		/**
		 * @private
		 * Handles the state of the control once a transaction has been started.
		 * @see WFSTEvent.TRANSACTION_COMPLETED
		 * @see WFSTEvent.TRANSACTION_FAILED
		 */
		private function transactionEnded( event :WFSTEvent ) :void
		{
			determineLayerState();
		}
		
		
		
		/**
		 * @private
		 * Determines the current state of the WFSTransactionalLayer and updates the controls to reflect that.
		 */
		private function determineLayerState() :void
		{
			resetButtonState();
			if( wfsLayer.featureSelected )
			{
				
				if( wfsLayer.editing )
				{
					
				}
				else
				{
					
				}
			}
		}
		
		/**
		 * @private
		 * Resets all control buttons to the default state.
		 */
		private function resetButtonState() :void
		{
			allButtonsOff();
			
		}
		
		/**
		 * @private
		 * Turns all control buttons off.
		 */
		private function allButtonsOff() :void
		{
			
		}
		
		/**
		 * @private
		 * sets the dataGrid in WFST layer.
		 * @see WFSTEvent.FEATURE_SELECTED
		 */
		private function loadingComplete( event :WFSEvent ) :void
		{
			if( wfsLayer)
			{
				myDataGrid.dataProvider = wfsLayer.featureSetAttributes;
				//non rimuovere GML_FEATURE_ID dall'array perche' usato come indice per selezione
				
				//seleziona la prima feature, non mi piace e da problemi in fase di aggiornamento (deseleziona la feature corrente)
				//selectFirstFeature();
			}
			
		}
		
		protected function wfsLayerVisible_clickHandler(event:MouseEvent):void
		{
			var selectedLayer :Object = wfsLayerComboBox.selectedItem;
			if(selectedLayer)
			{
				wfsLayer = selectedLayer.Layer as WFSTLayer;
				if( wfsLayer is WFSTLayer)
				{
					wfsLayer.visible =  wfsLayerVisible.selected;
					if(wfsLayer.visible)
						wfsLayer.Refresh();
				}
			}
		}
		
	]]>
</mx:Script>
<mx:HBox width="100%" horizontalAlign="left">
	<mx:Label text="Choose the layer" visible="{showWFSLayerChoices}"/>
	<mx:ComboBox id="wfsLayerComboBox" labelField="Name" prompt="Select a layer" valueCommit="onLayerChange()" visible="{showWFSLayerChoices}" enabled="{m_canSelectLayer}">
		<mx:ArrayCollection id="wfsLayers" />
	</mx:ComboBox>
	<mx:CheckBox id="wfsLayerVisible" label="Visible" click="wfsLayerVisible_clickHandler(event)"
				 enabled="{m_canSelectLayer}" visible="{showWFSLayerChoices}"/>
</mx:HBox>
<mx:DataGrid id="myDataGrid" xmlns:mx="http://www.adobe.com/2006/mxml" editable="false"
			 horizontalScrollPolicy="auto"
			 width="100%" height="100%" itemClick="itemClickEvent(event);"
	>
	<!--itemEditBegin="onAttributeEditBegin(event)"
	itemEditEnd="onAttributeEditEnd(event)"-->
	
<!--
	<mx:columns>
		<mx:DataGridColumn dataField="Name" sortable="false" editable="false"/>
		<mx:DataGridColumn id="valueColumn" dataField="Value" sortable="false" editable="false"/>
	</mx:columns>	-->
</mx:DataGrid>
</mx:Box>